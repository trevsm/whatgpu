{"version":3,"sources":["gpu.png","gpu-small.png","CpuGpu.js","App.js","index.js"],"names":["Model","props","group","useRef","useGLTF","nodes","materials","ani","useSpring","pos","active","config","mass","tension","friction","precision","useFrame","clock","current","rotation","y","elapsedTime","Math","PI","ref","position","scale","material","Metal","geometry","Chip_1","Chip","Chip_2","Edge","Chip_3","Dots","preload","App","useState","setActive","type","gpu","useDetectGPU","activeClass","className","src","logoSmall","logo","onClick","camera","fov","pixelRatio","window","devicePixelRatio","intensity","tier","opacity","fallback","ReactDOM","render","document","getElementById"],"mappings":"mMAAe,MAA0B,gCCA1B,MAA0B,sC,wBCM1B,SAASA,EAAMC,GAC5B,IAAMC,EAAQC,mBADqB,EAENC,YAAQ,wBAA7BC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,UAETC,EAAMC,oBAAU,CACpBC,IAAKR,EAAMS,OAAS,CAAC,EAAG,EAAG,GAAK,CAAC,GAAI,GAAI,GACzCC,OAAQ,CACNC,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,UAAW,QAUf,OANAC,aAAS,YAAgB,IAAbC,EAAY,EAAZA,MACNhB,EAAMS,SACRR,EAAMgB,QAAQC,SAASC,EAAIH,EAAMI,YAAc,EAAIC,KAAKC,GAAK,EAAI,OAKnE,kBAAC,IAAErB,MAAH,CAASsB,IAAKtB,EAAOuB,SAAUlB,EAAIE,IAAKiB,MAAO,CAAC,EAAG,EAAG,IACpD,0BAAMC,SAAUrB,EAAUsB,MAAOC,SAAUxB,EAAMyB,OAAOD,WACxD,0BAAMF,SAAUrB,EAAUyB,KAAMF,SAAUxB,EAAM2B,OAAOH,WACvD,0BAAMF,SAAUrB,EAAU2B,KAAMJ,SAAUxB,EAAM6B,OAAOL,WACvD,0BAAMF,SAAUrB,EAAU2B,KAAMJ,SAAUxB,EAAM8B,KAAKN,YAK3DzB,IAAQgC,QAAQ,wB,YCtBD,SAASC,IAAO,IAAD,EACAC,oBAAS,GADT,mBACrB5B,EADqB,KACb6B,EADa,KAEtBC,EAAOrC,iBAAO,IACdsC,EAAMC,cAENC,EAAcjC,EAAS,UAAY,GAMzC,OACE,oCACE,yBAAKkC,UAAU,QACb,yBAAKA,UAAS,eAAUD,GAAeE,IAAKC,KAE9C,yBAAKF,UAAU,UACb,yBAAKA,UAAS,gBAAWD,IACvB,yBAAKC,UAAS,eAAUD,IAAgBH,EAAKtB,WAGjD,yBAAK0B,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAS,eAAUD,GAAeE,IAAKE,IAC5C,4BAAQC,QAjBhB,WACER,EAAKtB,QAAL,OAAeuB,QAAf,IAAeA,OAAf,EAAeA,EAAKA,IACpBF,GAAU,IAe2BK,UAAS,UAAKD,IAA7C,gBAKJ,kBAAC,IAAD,CACEM,OAAQ,CAAExB,SAAU,CAAC,EAAG,GAAK,IAAMyB,IAAK,IACxCC,WAAYC,OAAOC,kBAEnB,kCAAcC,UAAW,IACzB,sCAAkBA,UAAW,OACzB,OAAHb,QAAG,IAAHA,OAAA,EAAAA,EAAKc,MAAO,EACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,QAAS,OAEhB,KACJ,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACzD,EAAD,CAAOU,OAAQA,OClDzBgD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4cef49ae.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gpu.94dc91d8.png\";","export default __webpack_public_path__ + \"static/media/gpu-small.0e2229f5.png\";","import React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei/useGLTF'\nimport { useFrame } from 'react-three-fiber'\nimport { useSpring } from '@react-spring/core'\nimport { a } from '@react-spring/three'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/models/gpu_gpu.gltf')\n\n  const ani = useSpring({\n    pos: props.active ? [0, 0, 0] : [0, -.5, 0],\n    config: {\n      mass: .7,\n      tension: 50,\n      friction: 10,\n      precision: 0.0001,\n    },\n  })\n\n  useFrame(({ clock }) => {\n    if (props.active) {\n      group.current.rotation.y = clock.elapsedTime / 3 + Math.PI / 2 - 0.5\n    }\n  })\n\n  return (\n    <a.group ref={group} position={ani.pos} scale={[2, 2, 2]}>\n      <mesh material={materials.Metal} geometry={nodes.Chip_1.geometry} />\n      <mesh material={materials.Chip} geometry={nodes.Chip_2.geometry} />\n      <mesh material={materials.Edge} geometry={nodes.Chip_3.geometry} />\n      <mesh material={materials.Edge} geometry={nodes.Dots.geometry} />\n    </a.group>\n  )\n}\n\nuseGLTF.preload('/models/gpu_gpu.gltf')\n","import React, { Suspense, useRef, useState } from 'react'\r\nimport { EffectComposer, Noise } from 'react-postprocessing'\r\nimport { Canvas } from 'react-three-fiber'\r\nimport { Stats, useDetectGPU } from '@react-three/drei'\r\n\r\nimport logo from './gpu.png'\r\nimport logoSmall from './gpu-small.png'\r\n\r\nimport { useSpring, animated } from 'react-spring'\r\nimport Model from './CpuGpu'\r\n\r\nimport 'minireset.css'\r\nimport './App.css'\r\n\r\nexport default function App() {\r\n  const [active, setActive] = useState(false)\r\n  const type = useRef('')\r\n  const gpu = useDetectGPU()\r\n\r\n  const activeClass = active ? ' active' : ''\r\n\r\n  function calculateGpu() {\r\n    type.current = gpu?.gpu\r\n    setActive(true)\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"logo\">\r\n        <img className={`title${activeClass}`} src={logoSmall} />\r\n      </div>\r\n      <div className=\"result\">\r\n        <div className={`center${activeClass}`}>\r\n          <div className={`title${activeClass}`}>{type.current}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"landing\">\r\n        <div className=\"center\">\r\n          <img className={`title${activeClass}`} src={logo} />\r\n          <button onClick={calculateGpu} className={`${activeClass}`}>\r\n            Calculate.\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Canvas\r\n        camera={{ position: [0, 0.1, 0.5], fov: 60 }}\r\n        pixelRatio={window.devicePixelRatio}\r\n      >\r\n        <ambientLight intensity={1} />\r\n        <directionalLight intensity={1.5} />\r\n        {gpu?.tier > 2 ? (\r\n          <EffectComposer>\r\n            <Noise opacity={0.01} />\r\n          </EffectComposer>\r\n        ) : null}\r\n        <Suspense fallback={null}>\r\n          <Model active={active} />\r\n        </Suspense>\r\n        {/* <Stats /> */}\r\n      </Canvas>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}